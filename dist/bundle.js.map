{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://weblogger/./src/IndexDB.ts","webpack://weblogger/./src/index.ts","webpack://weblogger/./src/utils.ts","webpack://weblogger/webpack/bootstrap","webpack://weblogger/webpack/startup"],"sourcesContent":["import { filterCondition } from './type';\nclass IndexedDBDatabase {\n\tprivate prefix: string;\n\tprivate databaseName: string;\n\tprivate objectStoreName: string;\n\tprivate db: any;\n\n\tconstructor(databaseName: string, objectStoreName: string) {\n\t\tthis.prefix = '[LogIndexedDBSDK] :';\n\t\tthis.databaseName = databaseName;\n\t\tthis.objectStoreName = objectStoreName;\n\t\tthis.db = null;\n\t}\n\n\topenDatabase() {\n\t\treturn new Promise<void>((resolve, reject) => {\n\t\t\tconst request = window.indexedDB.open(this.databaseName);\n\n\t\t\trequest.onerror = (event) => {\n\t\t\t\tconst error = (event.target as IDBOpenDBRequest).error;\n\n\t\t\t\tconsole.error(`${this.prefix} Failed to open database: ${error}`);\n\t\t\t\treject(error);\n\t\t\t};\n\n\t\t\trequest.onsuccess = (event) => {\n\t\t\t\tthis.db = (event.target as IDBOpenDBRequest).result\n\t\t\t\tconsole.log(`${this.prefix} Open database ${this.databaseName} successfully.`);\n\t\t\t\tresolve();\n\t\t\t};\n\n\t\t\trequest.onupgradeneeded = (event) => {\n\t\t\t\tconst db = (event.target as IDBOpenDBRequest).result;\n\n\t\t\t\tif (!db.objectStoreNames.contains(this.objectStoreName)) {\n\n\t\t\t\t\tconst OS = db.createObjectStore(this.objectStoreName, { keyPath : 'id', autoIncrement : true });\n\n\t\t\t\t\tOS.createIndex('byId', 'id', { unique : true });\n\t\t\t\t\tOS.createIndex('byTimestamp', 'timestamp');\n\t\t\t\t\tOS.createIndex('byModule', 'module');\n\t\t\t\t\tOS.createIndex('byUserId', 'userId');\n\t\t\t\t\tOS.createIndex('byClientId', 'clientId');\n\t\t\t\t}\n\t\t\t};\n\t\t});\n\t}\n\n\texecuteQuery(request: any, successCallback: any, errorCallback: any) {\n\t\trequest.onsuccess = (event: any) => {\n\t\t\tif (successCallback) {\n\t\t\t\tsuccessCallback(event.target.result);\n\t\t\t}\n\t\t};\n\n\t\trequest.onerror = (event: any) => {\n\t\t\tconsole.error(`${this.prefix} Error executing query: ${event.target.error}`);\n\t\t\tif (errorCallback) {\n\t\t\t\terrorCallback(event.target.error);\n\t\t\t}\n\t\t};\n\t}\n\n\tcreateTransaction(mode: string) {\n\t\tconst transaction = this.db.transaction(this.objectStoreName, mode);\n\n\t\treturn transaction.objectStore(this.objectStoreName);\n\t}\n\n\tcreateTable(successCallback?: any, errorCallback?: any) {\n\n\t\treturn new Promise<void>((resolve, reject) => {\n\t\t\tconst request = this.openDatabase();\n\n\t\t\trequest.then(() => {\n\t\t\t\tresolve();\n\n\t\t\t\tif (successCallback) {\n\t\t\t\t\tsuccessCallback();\n\t\t\t\t}\n\t\t\t}).catch((error) => {\n\t\t\t\treject(error);\n\n\t\t\t\tif (errorCallback) {\n\t\t\t\t\terrorCallback(error);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n\tinsertData(data: any, successCallback?: any, errorCallback?: any) {\n\t\treturn new Promise<void>((resolve, reject) => {\n\t\t\tconst objectStore = this.createTransaction('readwrite');\n\t\t\tconst request = objectStore.add(data);\n\n\t\t\tthis.executeQuery(request, () => {\n\t\t\t\tconsole.log(`${this.prefix} Data inserted successfully.`);\n\t\t\t\tresolve();\n\n\t\t\t\tif (successCallback) {\n\t\t\t\t\tsuccessCallback();\n\t\t\t\t}\n\t\t\t}, (error : any) => {\n\t\t\t\treject(error);\n\n\t\t\t\tif (errorCallback) {\n\t\t\t\t\terrorCallback(error);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n\tselectData(condition: filterCondition, successCallback: any, errorCallback: any) {\n\t\treturn new Promise<any[]>((resolve, reject) => {\n\t\t\tconst objectStore = this.createTransaction('readonly');\n\t\t\tconst results: any[] = [];\n\n\t\t\tconsole.log(condition)\n\t\t\tlet request\n\n\t\t\tif (condition && condition.startTime && condition.endTime) {\n\t\t\t\trequest = objectStore.index('byTimestamp').openCursor(IDBKeyRange.bound(condition.startTime, condition.endTime));\n\t\t\t}\n\t\t\telse {\n\t\t\t\trequest = objectStore.openCursor();\n\t\t\t}\n\n\t\t\trequest.onsuccess = (event: any) => {\n\t\t\t\tconst cursor = event.target.result;\n\n\t\t\t\tif (cursor) {\n\t\t\t\t\tconst logEntry = cursor.value;\n\n\t\t\t\t\tif (\n\t\t\t\t\t\t(!condition.module || logEntry.module === condition.module) &&\n\t\t\t\t\t\t(!condition.level || logEntry.level === condition.level) &&\n\t\t\t\t\t\t(!condition.userId || logEntry.userId === condition.userId) &&\n\t\t\t\t\t\t(!condition.clientId || logEntry.clientId === condition.clientId)\n\t\t\t\t\t) {\n\t\t\t\t\t\tresults.push(logEntry);\n\t\t\t\t\t}\n\n\t\t\t\t\tcursor.continue();\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tconsole.log(`${this.prefix} Selected data:`, results);\n\t\t\t\t\tresolve(results);\n\n\t\t\t\t\tif (successCallback) {\n\t\t\t\t\t\tsuccessCallback(results);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\n\t\t\trequest.onerror = (event: any) => {\n\t\t\t\treject(event.target.error);\n\n\t\t\t\tif (errorCallback) {\n\t\t\t\t\terrorCallback(event.target.error);\n\t\t\t\t}\n\t\t\t};\n\t\t});\n\t}\n\n\tupdateData(condition: any, newData: any, successCallback: any, errorCallback: any) {\n\t\treturn new Promise<void>((resolve, reject) => {\n\t\t\tconst objectStore = this.createTransaction('readwrite');\n\t\t\tconst request = objectStore.openCursor(IDBKeyRange.only(condition));\n\n\t\t\trequest.onsuccess = (event: any) => {\n\t\t\t\tconst cursor = event.target.result;\n\n\t\t\t\tif (cursor) {\n\t\t\t\t\tconst updateRequest = cursor.update(newData);\n\n\t\t\t\t\tthis.executeQuery(updateRequest, () => {\n\t\t\t\t\t\tconsole.log(`${this.prefix} Data updated successfully.`);\n\t\t\t\t\t\tresolve();\n\n\t\t\t\t\t\tif (successCallback) {\n\t\t\t\t\t\t\tsuccessCallback();\n\t\t\t\t\t\t}\n\t\t\t\t\t}, (error:any) => {\n\t\t\t\t\t\treject(error);\n\n\t\t\t\t\t\tif (errorCallback) {\n\t\t\t\t\t\t\terrorCallback(error);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tconsole.log(`${this.prefix} No data found for update.`);\n\t\t\t\t\tresolve();\n\n\t\t\t\t\tif (successCallback) {\n\t\t\t\t\t\tsuccessCallback();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\n\t\t\trequest.onerror = (event: any) => {\n\t\t\t\treject(event.target.error);\n\n\t\t\t\tif (errorCallback) {\n\t\t\t\t\terrorCallback(event.target.error);\n\t\t\t\t}\n\t\t\t};\n\t\t});\n\t}\n\n\tdeleteData(condition: any, successCallback: any, errorCallback: any) {\n\t\treturn new Promise<void>((resolve, reject) => {\n\t\t\tconst objectStore = this.createTransaction('readwrite');\n\t\t\tconst request = objectStore.openCursor(IDBKeyRange.only(condition));\n\n\t\t\trequest.onsuccess = (event: any) => {\n\t\t\t\tconst cursor = event.target.result;\n\n\t\t\t\tif (cursor) {\n\t\t\t\t\tconst deleteRequest = cursor.delete();\n\n\t\t\t\t\tthis.executeQuery(deleteRequest, () => {\n\t\t\t\t\t\tconsole.log(`${this.prefix} Data deleted successfully.`);\n\t\t\t\t\t\tresolve();\n\n\t\t\t\t\t\tif (successCallback) {\n\t\t\t\t\t\t\tsuccessCallback();\n\t\t\t\t\t\t}\n\t\t\t\t\t}, (error:any) => {\n\t\t\t\t\t\treject(error);\n\n\t\t\t\t\t\tif (errorCallback) {\n\t\t\t\t\t\t\terrorCallback(error);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tconsole.log(`${this.prefix} No data found for delete.`);\n\t\t\t\t\tresolve();\n\n\t\t\t\t\tif (successCallback) {\n\t\t\t\t\t\tsuccessCallback();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\n\t\t\trequest.onerror = (event: any) => {\n\t\t\t\treject(event.target.error);\n\n\t\t\t\tif (errorCallback) {\n\t\t\t\t\terrorCallback(event.target.error);\n\t\t\t\t}\n\t\t\t};\n\t\t});\n\t}\n}\n\nexport = IndexedDBDatabase;\n","import IndexedDBDatabase from './IndexDB';\nimport { filterCondition } from './type';\nimport Utils from './utils';\n\nclass LoggerModule {\n\tprivate moduleName: string;\n\tprivate Logger: any;\n\n\tconstructor({ moduleName, Logger }: { moduleName: string, Logger: any }) {\n\t\tthis.moduleName = moduleName;\n\t\tthis.Logger = Logger;\n\t}\n\n\tinfo(message: string) {\n\t\tconsole.log(`[Info] [${this.moduleName}] ${message}`);\n\t\tthis.Logger(this.moduleName, 'Info', message);\n\t}\n\n\twarn(message: string) {\n\t\tconsole.log(`[Warn] [${this.moduleName}] ${message}`);\n\t\tthis.Logger(this.moduleName, 'Warn', message);\n\t}\n}\n\nclass Logger {\n\tprivate CollectionName: string;\n\tprivate DatabaseName: string;\n\tprivate ObjectStoreName: string;\n\tprivate UserId: string;\n\tprivate ClientId: string;\n\tprivate prefix: string;\n\tprivate dbClient!: IndexedDBDatabase;\n\t[key: string]: any; // 添加索引签名，允许任意属性\n\n\tconstructor(props: {\n\t\tCollectionName?: string,\n\t\tDatabaseName?: string,\n\t\tObjectStoreName?: string,\n\t\tUserId?: string,\n\t\tClientId?: string,\n\t\tModules?: string[],\n\t}) {\n\t\tconst {\n\t\t\tCollectionName = 'logs',\n\t\t\tDatabaseName = 'MyDatabase',\n\t\t\tObjectStoreName = 'logs',\n\t\t\tUserId = 'UNKNOWN',\n\t\t\tClientId = 'UNKNOWN',\n\t\t\tModules = []\n\t\t} = props;\n\n\t\tthis.CollectionName = CollectionName;\n\t\tthis.DatabaseName = DatabaseName;\n\t\tthis.ObjectStoreName = ObjectStoreName;\n\t\tthis.UserId = UserId;\n\t\tthis.ClientId = ClientId;\n\n\t\tconsole.log(this.ClientId);\n\n\t\tthis.prefix = '[LogSystem] : ';\n\t\tconsole.log(`${this.prefix}Logger initialized.`);\n\t\tthis.connect();\n\t\tthis.initModules(Modules);\n\t}\n\n\tconnect() {\n\t\tthis.dbClient = new IndexedDBDatabase(this.DatabaseName, this.ObjectStoreName);\n\t\tthis.dbClient\n\t\t\t.openDatabase()\n\t\t\t.then(() => {\n\t\t\t\tconsole.log(`${this.prefix}Connected to IndexedDB.`);\n\t\t\t\tthis.createTable();\n\t\t\t})\n\t\t\t.catch((error: any) => {\n\t\t\t\tconsole.error(`${this.prefix}Error connecting to IndexedDB:`, error);\n\t\t\t});\n\t}\n\n\tinitModules(modules: string[]) {\n\t\tmodules.forEach((module) => {\n\t\t\tthis[module] = new LoggerModule({ moduleName : module, Logger : this.logger.bind(this) }) as any;\n\t\t});\n\t}\n\n\tcreateTable() {\n\t\tthis.dbClient\n\t\t\t.createTable()\n\t\t\t.then(() => {\n\t\t\t\tconsole.log(`${this.prefix}Logs table created successfully.`);\n\t\t\t})\n\t\t\t.catch((error: any) => {\n\t\t\t\tconsole.error(`${this.prefix}Error creating logs table:`, error);\n\t\t\t});\n\t}\n\n\tlogger(module: string, level: string, content: string) {\n\t\tconst data = {\n\t\t\tuserId    : this.UserId,\n\t\t\tclientId  : this.ClientId,\n\t\t\tmodule    : module,\n\t\t\tlevel     : level,\n\t\t\ttimestamp : Utils.getFormattedDate(),\n\t\t\tmessage   : content,\n\t\t\tisUpload  : false,\n\t\t\tdata      : { key : 'value' }\n\t\t};\n\n\t\tthis.dbClient\n\t\t\t.insertData(data)\n\t\t\t.then(() => {\n\t\t\t\tconsole.log(`${this.prefix}Log inserted successfully.`);\n\t\t\t})\n\t\t\t.catch((error: any) => {\n\t\t\t\tconsole.error(`${this.prefix}Error inserting log:`, error);\n\t\t\t});\n\t}\n\n\tgetLogs(condition: filterCondition, successCallback: any, errorCallback: any) {\n\t\t// const condition = new Date().toISOString(); // 获取当前时间\n\n\t\tthis.dbClient.selectData(condition = {\n\t\t\tstartTime : Utils.getFormattedDate('1970-01-01 00:00:00.000'),\n\t\t\tendTime   : Utils.getFormattedDate()\n\t\t}, successCallback, errorCallback)\n\t\t\t.then((logs) => {\n\t\t\t\tconsole.log(`${this.prefix}Logs retrieved successfully:`, logs);\n\t\t\t})\n\t\t\t.catch((error: any) => {\n\t\t\t\tconsole.error(`${this.prefix}Error retrieving logs:`, error);\n\t\t\t});\n\t}\n}\n\ndeclare global {\n  interface Window {\n    Logger: typeof Logger;\n  }\n}\n\nwindow.Logger = Logger;\n\nexport default Logger;\n","class Utils {\n\tstatic getFormattedDate(time ?: string): string {\n\t\tconst transactionDate = time\n\t\t\t? new Date(time)\n\t\t\t: new Date();\n\t\tconst currentDate = transactionDate;\n\n\t\tconst year = currentDate.getFullYear();\n\t\tconst month = String(currentDate.getMonth() + 1).padStart(2, '0'); \n\t\tconst day = String(currentDate.getDate()).padStart(2, '0');\n\t\tconst hours = String(currentDate.getHours()).padStart(2, '0');\n\t\tconst minutes = String(currentDate.getMinutes()).padStart(2, '0');\n\t\tconst seconds = String(currentDate.getSeconds()).padStart(2, '0');\n\t\tconst milliseconds = String(currentDate.getMilliseconds()).padStart(3, '0');\n\n\t\tconst formattedDate = `${year}-${month}-${day} ${hours}:${minutes}:${seconds}.${milliseconds}`;\n\n\t\treturn formattedDate;\n\t}\n\n\tstatic generateRandomString(length: number): string {\n\t\tconst characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n\t\tlet result = '';\n  \n\t\tfor (let i = 0; i < length; i++) {\n\t\t\tconst randomIndex = Math.floor(Math.random() * characters.length);\n\n\t\t\tresult += characters.charAt(randomIndex);\n\t\t}\n  \n\t\treturn result;\n\t}\n}\n\nexport = Utils;\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(607);\n"],"names":["databaseName","objectStoreName","this","prefix","db","openDatabase","Promise","resolve","reject","request","window","indexedDB","open","onerror","event","error","target","console","onsuccess","result","log","onupgradeneeded","objectStoreNames","contains","OS","createObjectStore","keyPath","autoIncrement","createIndex","unique","executeQuery","successCallback","errorCallback","createTransaction","mode","transaction","objectStore","createTable","then","catch","insertData","data","add","selectData","condition","results","startTime","endTime","index","openCursor","IDBKeyRange","bound","cursor","logEntry","value","module","level","userId","clientId","push","continue","updateData","newData","only","updateRequest","update","deleteData","deleteRequest","delete","IndexedDBDatabase","moduleName","Logger","info","message","warn","props","CollectionName","DatabaseName","ObjectStoreName","UserId","ClientId","Modules","connect","initModules","dbClient","modules","forEach","LoggerModule","logger","bind","content","timestamp","getFormattedDate","isUpload","key","getLogs","logs","time","currentDate","Date","year","getFullYear","month","String","getMonth","padStart","day","getDate","hours","getHours","minutes","getMinutes","seconds","getSeconds","milliseconds","getMilliseconds","generateRandomString","length","i","randomIndex","Math","floor","characters","random","charAt","Utils","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","__webpack_modules__","call"],"sourceRoot":""}